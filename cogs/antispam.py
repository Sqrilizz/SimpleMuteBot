import discord
from discord.ext import commands
from datetime import datetime, timedelta, timezone
from main import format_duration
import config
import asyncio
from collections import defaultdict, deque
import json
from pathlib import Path
import logging

logger = logging.getLogger(__name__)

# –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ (–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ —Ñ–∞–π–ª–∞)
BLOCKED_WORDS_FILE = Path('discord_blocked_words_full.txt')
BLOCKED_WORDS = []
try:
    with BLOCKED_WORDS_FILE.open(encoding='utf-8') as f:
        BLOCKED_WORDS = [line.strip().lower() for line in f if line.strip()]
except FileNotFoundError:
    BLOCKED_WORDS = []

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω—Ç–∏—Å–ø–∞–º–∞
SPAM_THRESHOLD = 5      # —Å–æ–æ–±—â–µ–Ω–∏–π
SPAM_WINDOW = 10        # —Å–µ–∫—É–Ω–¥
MENTION_SPAM_THRESHOLD = 5  # —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
MENTION_SPAM_WINDOW = 10    # —Å–µ–∫—É–Ω–¥
EMOJI_SPAM_THRESHOLD = 10   # —ç–º–æ–¥–∑–∏
EMOJI_SPAM_WINDOW = 10      # —Å–µ–∫—É–Ω–¥

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω—Ç–∏-nuke
NUKE_ACTION_THRESHOLD = 3    # –¥–µ–π—Å—Ç–≤–∏–π
NUKE_ACTION_WINDOW = 30      # —Å–µ–∫—É–Ω–¥
NUKE_ALERT_THRESHOLD = 2     # –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∞–ª–µ—Ä—Ç–∞

class AntiSpamCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        
        # –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤ (–Ω–µ —Ç—Ä–æ–≥–∞–µ–º –∏—Ö –≤–µ–±—Ö—É–∫–∏)
        self.whitelisted_bots = {
            536991182035746816,  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –±–æ—Ç–∞ Wick
        }
        
        # –ê–Ω—Ç–∏—Å–ø–∞–º –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.spam_history = defaultdict(lambda: deque(maxlen=SPAM_THRESHOLD))
        self.mention_spam_history = defaultdict(lambda: deque(maxlen=MENTION_SPAM_THRESHOLD))
        self.emoji_spam_history = defaultdict(lambda: deque(maxlen=EMOJI_SPAM_THRESHOLD))
        
        # –ê–Ω—Ç–∏-nuke –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        self.nuke_history = defaultdict(lambda: deque(maxlen=NUKE_ACTION_THRESHOLD))
        self.nuke_alerts = set()
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º—É—Ç—ã
        self.temp_mutes = {}
        
        # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ –ª–æ–≥–æ–≤
        self.processed_webhooks = set()
        self.webhook_cooldown = 60  # —Å–µ–∫—É–Ω–¥
        self.notification_cooldown = {}  # –î–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.notification_delay = 30  # —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.load_settings()

    # === –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ (–∫–æ–º–∞–Ω–¥—ã) ===
    @commands.command(name="blocked", help="–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ (–ø–µ—Ä–≤—ã–µ 50)")
    async def cmd_blocked_list(self, ctx):
        words = []
        if BLOCKED_WORDS_FILE.exists():
            with BLOCKED_WORDS_FILE.open(encoding='utf-8') as f:
                words = [line.strip() for line in f if line.strip()]
        if not words:
            await ctx.send("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
            return
        preview = words[:50]
        content = "\n".join(f"- {w}" for w in preview)
        more = f"\n‚Ä¶ –∏ –µ—â—ë {len(words)-50}" if len(words) > 50 else ""
        await ctx.send(f"–í—Å–µ–≥–æ —Å–ª–æ–≤: {len(words)}\n{content}{more}")

    @commands.command(name="addword", help="–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ –≤ –±–ª–æ–∫-–ª–∏—Å—Ç")
    @commands.has_permissions(administrator=True)
    async def cmd_add_word(self, ctx, *, word: str):
        word = (word or "").strip().lower()
        if not word:
            await ctx.send("–£–∫–∞–∂–∏—Ç–µ —Å–ª–æ–≤–æ.")
            return
        existing = set()
        if BLOCKED_WORDS_FILE.exists():
            with BLOCKED_WORDS_FILE.open(encoding='utf-8') as f:
                existing = set(line.strip().lower() for line in f if line.strip())
        if word in existing:
            await ctx.send("–≠—Ç–æ —Å–ª–æ–≤–æ —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ.")
            return
        with BLOCKED_WORDS_FILE.open('a', encoding='utf-8') as f:
            f.write(word + '\n')
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        existing.add(word)
        global BLOCKED_WORDS
        BLOCKED_WORDS = list(existing)
        await ctx.send(f"–î–æ–±–∞–≤–ª–µ–Ω–æ: `{word}`")

    @commands.command(name="delword", help="–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ –∏–∑ –±–ª–æ–∫-–ª–∏—Å—Ç–∞")
    @commands.has_permissions(administrator=True)
    async def cmd_del_word(self, ctx, *, word: str):
        word = (word or "").strip().lower()
        if not word or not BLOCKED_WORDS_FILE.exists():
            await ctx.send("–°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç.")
            return
        with BLOCKED_WORDS_FILE.open(encoding='utf-8') as f:
            words = [line.strip() for line in f if line.strip()]
        new_words = [w for w in words if w.lower() != word]
        if len(new_words) == len(words):
            await ctx.send("–¢–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.")
            return
        with BLOCKED_WORDS_FILE.open('w', encoding='utf-8') as f:
            for w in new_words:
                f.write(w + '\n')
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        global BLOCKED_WORDS
        BLOCKED_WORDS = [w.lower() for w in new_words]
        await ctx.send(f"–£–¥–∞–ª–µ–Ω–æ: `{word}`")

    def load_settings(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        settings_file = Path('antispam_settings.json')
        if settings_file.exists():
            try:
                with settings_file.open(encoding='utf-8') as f:
                    settings = json.load(f)
                    global SPAM_THRESHOLD, SPAM_WINDOW, MENTION_SPAM_THRESHOLD, MENTION_SPAM_WINDOW
                    global EMOJI_SPAM_THRESHOLD, EMOJI_SPAM_WINDOW, NUKE_ACTION_THRESHOLD, NUKE_ACTION_WINDOW
                    SPAM_THRESHOLD = settings.get('spam_threshold', SPAM_THRESHOLD)
                    SPAM_WINDOW = settings.get('spam_window', SPAM_WINDOW)
                    MENTION_SPAM_THRESHOLD = settings.get('mention_spam_threshold', MENTION_SPAM_THRESHOLD)
                    MENTION_SPAM_WINDOW = settings.get('mention_spam_window', MENTION_SPAM_WINDOW)
                    EMOJI_SPAM_THRESHOLD = settings.get('emoji_spam_threshold', EMOJI_SPAM_THRESHOLD)
                    EMOJI_SPAM_WINDOW = settings.get('emoji_spam_window', EMOJI_SPAM_WINDOW)
                    NUKE_ACTION_THRESHOLD = settings.get('nuke_action_threshold', NUKE_ACTION_THRESHOLD)
                    NUKE_ACTION_WINDOW = settings.get('nuke_action_window', NUKE_ACTION_WINDOW)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–Ω—Ç–∏—Å–ø–∞–º–∞: {e}")

    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª"""
        settings = {
            'spam_threshold': SPAM_THRESHOLD,
            'spam_window': SPAM_WINDOW,
            'mention_spam_threshold': MENTION_SPAM_THRESHOLD,
            'mention_spam_window': MENTION_SPAM_WINDOW,
            'emoji_spam_threshold': EMOJI_SPAM_THRESHOLD,
            'emoji_spam_window': EMOJI_SPAM_WINDOW,
            'nuke_action_threshold': NUKE_ACTION_THRESHOLD,
            'nuke_action_window': NUKE_ACTION_WINDOW
        }
        settings_file = Path('antispam_settings.json')
        with settings_file.open('w', encoding='utf-8') as f:
            json.dump(settings, f, ensure_ascii=False, indent=2)

    async def check_spam(self, message):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–ø–∞–º"""
        user_id = message.author.id
        now = datetime.now(timezone.utc).timestamp()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Å–ø–∞–º–∞
        spam_history = self.spam_history[user_id]
        spam_history.append(now)
        
        if len(spam_history) == SPAM_THRESHOLD and (now - spam_history[0]) <= SPAM_WINDOW:
            await self.handle_spam(message, "–æ–±—ã—á–Ω—ã–π —Å–ø–∞–º")
            return True
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∞–º–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
        mentions = len(message.mentions) + len(message.role_mentions)
        if mentions > 0:
            mention_history = self.mention_spam_history[user_id]
            mention_history.append(now)
            
            if len(mention_history) == MENTION_SPAM_THRESHOLD and (now - mention_history[0]) <= MENTION_SPAM_WINDOW:
                await self.handle_spam(message, "—Å–ø–∞–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏")
                return True
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∞–º–∞ —ç–º–æ–¥–∑–∏
        emoji_chars = 'üòÄüòÉüòÑüòÅüòÜüòÖüòÇü§£üòäüòáüôÇüôÉüòâüòåüòçü•∞üòòüòóüòôüòöüòãüòõüòùüòúü§™ü§®üßêü§ìüòéü§©ü•≥üòèüòíüòûüòîüòüüòïüôÅ‚òπÔ∏èüò£üòñüò´üò©ü•∫üò¢üò≠üò§üò†üò°ü§¨ü§Øüò≥ü•µü•∂üò±üò®üò∞üò•üòìü§óü§îü§≠ü§´ü§•üò∂üòêüòëüòØüò¶üòßüòÆüò≤ü•±üò¥ü§§üò™üòµü§êü•¥ü§¢ü§Æü§ßüò∑ü§íü§ïü§ëü§†üíÄüëªüëΩüëæü§ñüò∫üò∏üòπüòªüòºüòΩüôÄüòøüòæ'
        emoji_count = len([c for c in message.content if c in emoji_chars])
        if emoji_count > 5:
            emoji_history = self.emoji_spam_history[user_id]
            emoji_history.append(now)
            
            if len(emoji_history) == EMOJI_SPAM_THRESHOLD and (now - emoji_history[0]) <= EMOJI_SPAM_WINDOW:
                await self.handle_spam(message, "—Å–ø–∞–º —ç–º–æ–¥–∑–∏")
                return True
        
        return False

    async def check_bot_webhook_spam(self, message):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ø–∞–º –æ—Ç –±–æ—Ç–æ–≤ –∏ –≤–µ–±—Ö—É–∫–æ–≤"""
        user_id = message.author.id
        now = datetime.now(timezone.utc).timestamp()
        
        # –î–ª—è –≤–µ–±—Ö—É–∫–æ–≤ - –º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if message.webhook_id:
            # –°—Ä–∞–∑—É —É–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–∏
            await self.handle_webhook_spam(message)
            return True
        
        # –î–ª—è –±–æ—Ç–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ç–æ—Ä–∏—é
        bot_spam_history = self.spam_history.get(f"bot_{user_id}", deque(maxlen=3))
        self.spam_history[f"bot_{user_id}"] = bot_spam_history
        bot_spam_history.append(now)
        
        # –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –±–æ—Ç–æ–≤: 3 —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ 5 —Å–µ–∫—É–Ω–¥
        if len(bot_spam_history) == 3 and (now - bot_spam_history[0]) <= 5:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å rate limit
            await asyncio.sleep(0.5)
            await self.handle_bot_spam(message)
            return True
        
        return False

    async def handle_webhook_spam(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–∞–º –æ—Ç –≤–µ–±—Ö—É–∫–æ–≤"""
        webhook_id = message.webhook_id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ—Ç –≤–µ–±—Ö—É–∫
        if webhook_id in self.processed_webhooks:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤
        try:
            webhook_obj = await self.bot.fetch_webhook(webhook_id)
            if webhook_obj.user and webhook_obj.user.id in self.whitelisted_bots:
                logger.info(f"[AntiSpam] –í–µ–±—Ö—É–∫ {webhook_id} –æ—Ç –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞ –±–æ—Ç–∞ {webhook_obj.user.name}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return
        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≤–µ–±—Ö—É–∫–∞ {webhook_id}: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
        
        try:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –æ–Ω–æ –µ—â—ë —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
            try:
                await message.delete()
            except discord.NotFound:
                pass  # –ù–µ –ª–æ–≥–∏—Ä—É–µ–º, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
            except discord.Forbidden:
                logger.warning(f"[AntiSpam] –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –≤–µ–±—Ö—É–∫–∞ {webhook_id}")
            
            # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫
            if webhook_id:
                try:
                    webhook_obj = await self.bot.fetch_webhook(webhook_id)
                    await webhook_obj.delete(reason="–ê–Ω—Ç–∏—Å–ø–∞–º: —É–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∞–º-–≤–µ–±—Ö—É–∫–∞")
                    logger.info(f"[AntiSpam] –£–¥–∞–ª—ë–Ω –≤–µ–±—Ö—É–∫ {webhook_id} –∑–∞ —Å–ø–∞–º")
                except discord.NotFound:
                    logger.info(f"[AntiSpam] –í–µ–±—Ö—É–∫ {webhook_id} —É–∂–µ —É–¥–∞–ª—ë–Ω")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞ {webhook_id}: {e}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ–±—Ö—É–∫ –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
            self.processed_webhooks.add(webhook_id)
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ —Å –∫—É–ª–¥–∞—É–Ω–æ–º)
            if self.can_send_notification("webhook_spam"):
                admin_role_id = getattr(config, 'ADMIN_ALERT_ROLE_ID', None) or (getattr(config, 'TRUSTED_ROLE_IDS', None) or [None])[0]
                admin_ping = f'<@&{admin_role_id}>' if admin_role_id else None
                allowed_mentions = discord.AllowedMentions(roles=True)
                
                embed = discord.Embed(
                    title="üö´ –°–ø–∞–º-–≤–µ–±—Ö—É–∫ —É–¥–∞–ª—ë–Ω",
                    description=f"**–í–µ–±—Ö—É–∫:** {webhook_id}\n**–ö–∞–Ω–∞–ª:** {message.channel.mention}\n**–ü—Ä–∏—á–∏–Ω–∞:** –°–ø–∞–º",
                    color=discord.Color.red(),
                    timestamp=datetime.now()
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª —Ç–µ–∫—É—â–µ–π –≥–∏–ª—å–¥–∏–∏
                guild = message.guild
                if guild:
                    target_channel = guild.get_channel(getattr(config, 'ATTACK_ALERT_CHANNEL_ID', None)) or guild.get_channel(getattr(config, 'LOG_CHANNEL_ID', None))
                    if not target_channel:
                        for ch in guild.text_channels:
                            if ch.name.lower() in ['mod-logs', 'moderation-logs', 'logs', 'modlogs', 'audit-logs'] and ch.permissions_for(guild.me).send_messages:
                                target_channel = ch
                                break
                    if not target_channel and guild.system_channel and guild.system_channel.permissions_for(guild.me).send_messages:
                        target_channel = guild.system_channel
                    if target_channel:
                        if admin_ping:
                            await target_channel.send(admin_ping, allowed_mentions=allowed_mentions)
                        await target_channel.send(embed=embed)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–∞–º–∞ –≤–µ–±—Ö—É–∫–∞ {webhook_id}: {e}")
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É
        asyncio.create_task(self.cleanup_processed_webhooks())

    async def cleanup_processed_webhooks(self):
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –≤–µ–±—Ö—É–∫–æ–≤"""
        await asyncio.sleep(self.webhook_cooldown)
        self.processed_webhooks.clear()
    
    def can_send_notification(self, notification_type):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        now = datetime.now(timezone.utc).timestamp()
        last_notification = self.notification_cooldown.get(notification_type, 0)
        
        if now - last_notification < self.notification_delay:
            return False
        
        self.notification_cooldown[notification_type] = now
        return True

    async def handle_bot_spam(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–∞–º –æ—Ç –±–æ—Ç–æ–≤"""
        bot_id = message.author.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞
        if bot_id in self.processed_webhooks:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –º–µ—Ö–∞–Ω–∏–∑–º
            return
        
        try:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –æ–Ω–æ –µ—â—ë —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
            try:
                await message.delete()
            except discord.NotFound:
                pass  # –ù–µ –ª–æ–≥–∏—Ä—É–µ–º, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
            except discord.Forbidden:
                logger.warning(f"[AntiSpam] –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞ {bot_id}")
            
            # –ë–∞–Ω–∏–º –∏–ª–∏ –∫–∏–∫–∞–µ–º –±–æ—Ç–∞
            try:
                if message.guild.me.guild_permissions.ban_members:
                    await message.guild.ban(message.author, reason="–ê–Ω—Ç–∏—Å–ø–∞–º: —Å–ø–∞–º-–±–æ—Ç")
                    action = "–∑–∞–±–∞–Ω–µ–Ω"
                elif message.guild.me.guild_permissions.kick_members:
                    await message.guild.kick(message.author, reason="–ê–Ω—Ç–∏—Å–ø–∞–º: —Å–ø–∞–º-–±–æ—Ç")
                    action = "–∫–∏–∫–Ω—É—Ç"
                else:
                    action = "–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∫–∞–∑–∞—Ç—å (–Ω–µ—Ç –ø—Ä–∞–≤)"
            except discord.NotFound:
                logger.info(f"[AntiSpam] –ë–æ—Ç {message.author} —É–∂–µ –ø–æ–∫–∏–Ω—É–ª —Å–µ—Ä–≤–µ—Ä")
                action = "—É–∂–µ –ø–æ–∫–∏–Ω—É–ª —Å–µ—Ä–≤–µ—Ä"
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞–∫–∞–∑–∞–Ω–∏—è –±–æ—Ç–∞ {bot_id}: {e}")
                action = "–æ—à–∏–±–∫–∞ –Ω–∞–∫–∞–∑–∞–Ω–∏—è"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –±–æ—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
            self.processed_webhooks.add(bot_id)
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ —Å –∫—É–ª–¥–∞—É–Ω–æ–º)
            if self.can_send_notification("bot_spam"):
                admin_role_id = getattr(config, 'ADMIN_ALERT_ROLE_ID', None) or (getattr(config, 'TRUSTED_ROLE_IDS', None) or [None])[0]
                admin_ping = f'<@&{admin_role_id}>' if admin_role_id else None
                allowed_mentions = discord.AllowedMentions(roles=True)
                
                embed = discord.Embed(
                    title="ü§ñ –°–ø–∞–º-–±–æ—Ç –Ω–∞–∫–∞–∑–∞–Ω",
                    description=f"**–ë–æ—Ç:** {message.author.mention}\n**ID:** {message.author.id}\n**–î–µ–π—Å—Ç–≤–∏–µ:** {action}",
                    color=discord.Color.red(),
                    timestamp=datetime.now()
                )
                embed.set_footer(text=f"–ö–∞–Ω–∞–ª: {message.channel.name}")
                
                guild = message.guild
                if guild:
                    target_channel = guild.get_channel(getattr(config, 'ATTACK_ALERT_CHANNEL_ID', None)) or guild.get_channel(getattr(config, 'LOG_CHANNEL_ID', None))
                    if not target_channel:
                        for ch in guild.text_channels:
                            if ch.name.lower() in ['mod-logs', 'moderation-logs', 'logs', 'modlogs', 'audit-logs'] and ch.permissions_for(guild.me).send_messages:
                                target_channel = ch
                                break
                    if not target_channel and guild.system_channel and guild.system_channel.permissions_for(guild.me).send_messages:
                        target_channel = guild.system_channel
                    if target_channel:
                        if admin_ping:
                            await target_channel.send(admin_ping, allowed_mentions=allowed_mentions)
                        await target_channel.send(embed=embed)
            
            logger.info(f"[AntiSpam] –ë–æ—Ç {message.author} {action} –∑–∞ —Å–ø–∞–º")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–∞–º–∞ –±–æ—Ç–∞ {bot_id}: {e}")

    async def handle_spam(self, message, spam_type):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–π —Å–ø–∞–º"""
        try:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.delete()
            
            # –í—Ä–µ–º–µ–Ω–Ω—ã–π –º—É—Ç –Ω–∞ 5 –º–∏–Ω—É—Ç
            duration = timedelta(minutes=5)
            until = datetime.now(timezone.utc) + duration
            
            try:
                await message.author.timeout(until, reason=f"–ê–Ω—Ç–∏—Å–ø–∞–º: {spam_type}")
            except discord.Forbidden:
                logger.warning(f"–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –º—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.author}")
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            embed = discord.Embed(
                title="üö´ –ê–Ω—Ç–∏—Å–ø–∞–º",
                description=f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {message.author.mention}\n**–¢–∏–ø:** {spam_type}\n**–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** 5 –º–∏–Ω—É—Ç",
                color=discord.Color.red(),
                timestamp=datetime.now()
            )
            embed.set_footer(text=f"ID: {message.author.id}")
            
            await message.channel.send(embed=embed, delete_after=10)
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            logger.info(f"[AntiSpam] {message.author} –ø–æ–ª—É—á–∏–ª –º—É—Ç –∑–∞ {spam_type}")
            
        except discord.Forbidden:
            logger.warning("–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–∞–º–∞: {e}")

    async def check_nuke_actions(self, user_id, action_type):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–∞–Ω—Ç–∏-nuke)"""
        now = datetime.now(timezone.utc).timestamp()
        nuke_history = self.nuke_history[user_id]
        nuke_history.append((now, action_type))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π –∑–∞ –æ–∫–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
        recent_actions = [action for timestamp, action in nuke_history if (now - timestamp) <= NUKE_ACTION_WINDOW]
        
        if len(recent_actions) >= NUKE_ALERT_THRESHOLD:
            if user_id not in self.nuke_alerts:
                await self.send_nuke_alert(user_id, recent_actions)
                self.nuke_alerts.add(user_id)
                # –°–±—Ä–æ—Å –∞–ª–µ—Ä—Ç–∞ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
                asyncio.create_task(self.reset_nuke_alert(user_id))

    async def send_nuke_alert(self, user_id, actions):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–ª–µ—Ä—Ç –æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        try:
            user = self.bot.get_user(user_id)
            if not user:
                return
            
            embed = discord.Embed(
                title="üö® –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!",
                description=(
                    f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user.mention}\n"
                    f"**ID:** {user_id}\n"
                    f"**–î–µ–π—Å—Ç–≤–∏—è:** {', '.join(actions)}\n\n"
                    f"**–í–æ–∑–º–æ–∂–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ nuke! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!**"
                ),
                color=discord.Color.dark_red(),
                timestamp=datetime.now()
            )
            embed.set_footer(text="AntiNuke Protection")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª –∞–ª–µ—Ä—Ç–æ–≤ —Å –ø–∏–Ω–≥–æ–º (—Å –∫—É–ª–¥–∞—É–Ω–æ–º)
            if self.can_send_notification("nuke_alert"):
                admin_role_id = getattr(config, 'ADMIN_ALERT_ROLE_ID', None) or (getattr(config, 'TRUSTED_ROLE_IDS', None) or [None])[0]
                admin_ping = f'<@&{admin_role_id}>' if admin_role_id else None
                allowed_mentions = discord.AllowedMentions(roles=True)
                
                # –ò—â–µ–º –≥–∏–ª—å–¥–∏—é, –≥–¥–µ –µ—Å—Ç—å —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                for guild in self.bot.guilds:
                    member = guild.get_member(user_id)
                    if member:
                        target_channel = guild.get_channel(getattr(config, 'ATTACK_ALERT_CHANNEL_ID', None)) or guild.get_channel(getattr(config, 'LOG_CHANNEL_ID', None))
                        if not target_channel:
                            for ch in guild.text_channels:
                                if ch.name.lower() in ['mod-logs', 'moderation-logs', 'logs', 'modlogs', 'audit-logs'] and ch.permissions_for(guild.me).send_messages:
                                    target_channel = ch
                                    break
                        if not target_channel and guild.system_channel and guild.system_channel.permissions_for(guild.me).send_messages:
                            target_channel = guild.system_channel
                        if target_channel:
                            if admin_ping:
                                await target_channel.send(admin_ping, allowed_mentions=allowed_mentions)
                            await target_channel.send(embed=embed)
                            break
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ nuke –∞–ª–µ—Ä—Ç–∞: {e}")

    async def reset_nuke_alert(self, user_id):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∞–ª–µ—Ä—Ç nuke —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç"""
        await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç
        self.nuke_alerts.discard(user_id)

    @commands.Cog.listener()
    async def on_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if message.author == self.bot.user:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â—ë —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
            await message.channel.fetch_message(message.id)
        except discord.NotFound:
            logger.info(f"[AntiSpam] –°–æ–æ–±—â–µ–Ω–∏–µ {message.id} —É–∂–µ —É–¥–∞–ª–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            pass
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤
        content = message.content.lower()
        for word in BLOCKED_WORDS:
            if word in content:
                try:
                    await message.delete()
                    
                    # –ï—Å–ª–∏ —ç—Ç–æ –≤–µ–±—Ö—É–∫ - —É–¥–∞–ª—è–µ–º –µ–≥–æ
                    if message.webhook_id:
                        await self.handle_webhook_spam(message)
                        return
                    # –ï—Å–ª–∏ —ç—Ç–æ –±–æ—Ç - –±–∞–Ω–∏–º/–∫–∏–∫–∞–µ–º
                    elif message.author.bot:
                        await self.handle_bot_spam(message)
                        return
                    # –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                    else:
                        await message.channel.send(
                            f"‚ùå {message.author.mention}, –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ (–∑–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–µ —Å–ª–æ–≤–æ)",
                            delete_after=5
                        )
                    
                    logger.info(f"[AntiSpam] –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.author}: {message.content}")
                except discord.Forbidden:
                    logger.warning("[AntiSpam] –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π.")
                except Exception as e:
                    logger.error(f"[AntiSpam] –û—à–∏–±–∫–∞: {e}")
                return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∞–º–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if not message.author.bot and not message.webhook_id:
            await self.check_spam(message)
        # –î–ª—è –±–æ—Ç–æ–≤ - –æ—Ç–¥–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        elif message.author.bot:
            await self.check_bot_webhook_spam(message)
        # –î–ª—è –≤–µ–±—Ö—É–∫–æ–≤ - –º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è
        elif message.webhook_id:
            await self.handle_webhook_spam(message)

    @commands.Cog.listener()
    async def on_member_ban(self, guild, user):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –±–∞–Ω—ã"""
        async for entry in guild.audit_logs(action=discord.AuditLogAction.ban, limit=1):
            if entry.user.id != self.bot.user.id:
                await self.check_nuke_actions(entry.user.id, "ban")

    @commands.Cog.listener()
    async def on_member_remove(self, member):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∫–∏–∫–∏"""
        async for entry in member.guild.audit_logs(action=discord.AuditLogAction.kick, limit=1):
            if entry.user.id != self.bot.user.id:
                await self.check_nuke_actions(entry.user.id, "kick")

    @commands.Cog.listener()
    async def on_guild_channel_delete(self, channel):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤"""
        async for entry in channel.guild.audit_logs(action=discord.AuditLogAction.channel_delete, limit=1):
            if entry.user.id != self.bot.user.id:
                await self.check_nuke_actions(entry.user.id, "channel_delete")

    @commands.Cog.listener()
    async def on_guild_role_delete(self, role):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π"""
        async for entry in role.guild.audit_logs(action=discord.AuditLogAction.role_delete, limit=1):
            if entry.user.id != self.bot.user.id:
                await self.check_nuke_actions(entry.user.id, "role_delete")

    @commands.Cog.listener()
    async def on_guild_emojis_update(self, guild, before, after):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏"""
        if len(before) > len(after):
            async for entry in guild.audit_logs(action=discord.AuditLogAction.emoji_delete, limit=1):
                if entry.user.id != self.bot.user.id:
                    await self.check_nuke_actions(entry.user.id, "emoji_delete")

    # –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–Ω—Ç–∏—Å–ø–∞–º–æ–º
    @commands.command(name="antispam", help="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω—Ç–∏—Å–ø–∞–º–∞")
    async def antispam_settings(self, ctx):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω—Ç–∏—Å–ø–∞–º–∞"""
        embed = discord.Embed(
            title="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω—Ç–∏—Å–ø–∞–º–∞",
            color=discord.Color.blue()
        )
        
        embed.add_field(
            name="üìù –û–±—ã—á–Ω—ã–π —Å–ø–∞–º",
            value=f"**–ü–æ—Ä–æ–≥:** {SPAM_THRESHOLD} —Å–æ–æ–±—â–µ–Ω–∏–π\n**–û–∫–Ω–æ:** {SPAM_WINDOW} —Å–µ–∫",
            inline=True
        )
        embed.add_field(
            name="üì¢ –°–ø–∞–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏",
            value=f"**–ü–æ—Ä–æ–≥:** {MENTION_SPAM_THRESHOLD} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π\n**–û–∫–Ω–æ:** {MENTION_SPAM_WINDOW} —Å–µ–∫",
            inline=True
        )
        embed.add_field(
            name="üòÄ –°–ø–∞–º —ç–º–æ–¥–∑–∏",
            value=f"**–ü–æ—Ä–æ–≥:** {EMOJI_SPAM_THRESHOLD} —ç–º–æ–¥–∑–∏\n**–û–∫–Ω–æ:** {EMOJI_SPAM_WINDOW} —Å–µ–∫",
            inline=True
        )
        embed.add_field(
            name="üõ°Ô∏è –ê–Ω—Ç–∏-nuke",
            value=f"**–ü–æ—Ä–æ–≥:** {NUKE_ACTION_THRESHOLD} –¥–µ–π—Å—Ç–≤–∏–π\n**–û–∫–Ω–æ:** {NUKE_ACTION_WINDOW} —Å–µ–∫",
            inline=True
        )
        
        await ctx.send(embed=embed)

    @commands.command(name="setspam", help="–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω—Ç–∏—Å–ø–∞–º–∞")
    async def set_spam_settings(self, ctx, setting: str, value: int):
        """–ò–∑–º–µ–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω—Ç–∏—Å–ø–∞–º–∞"""
        if not ctx.author.guild_permissions.administrator:
            await ctx.send("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            return
        
        global SPAM_THRESHOLD, SPAM_WINDOW, MENTION_SPAM_THRESHOLD, MENTION_SPAM_WINDOW
        global EMOJI_SPAM_THRESHOLD, EMOJI_SPAM_WINDOW, NUKE_ACTION_THRESHOLD, NUKE_ACTION_WINDOW
        
        setting = setting.lower()
        if setting == "spam_threshold":
            SPAM_THRESHOLD = value
        elif setting == "spam_window":
            SPAM_WINDOW = value
        elif setting == "mention_threshold":
            MENTION_SPAM_THRESHOLD = value
        elif setting == "mention_window":
            MENTION_SPAM_WINDOW = value
        elif setting == "emoji_threshold":
            EMOJI_SPAM_THRESHOLD = value
        elif setting == "emoji_window":
            EMOJI_SPAM_WINDOW = value
        elif setting == "nuke_threshold":
            NUKE_ACTION_THRESHOLD = value
        elif setting == "nuke_window":
            NUKE_ACTION_WINDOW = value
        else:
            await ctx.send("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞!")
            return
        
        self.save_settings()
        await ctx.send(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ `{setting}` –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ `{value}`")

    @commands.command(name="delwebhook", help="–£–¥–∞–ª–∏—Ç—å –≤–µ–±—Ö—É–∫ –ø–æ ID")
    async def delete_webhook(self, ctx, webhook_id: int):
        """–£–¥–∞–ª—è–µ—Ç –≤–µ–±—Ö—É–∫ –ø–æ ID"""
        if not ctx.author.guild_permissions.administrator:
            await ctx.send("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            return
        
        try:
            webhook = await self.bot.fetch_webhook(webhook_id)
            await webhook.delete(reason=f"–£–¥–∞–ª—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {ctx.author}")
            
            embed = discord.Embed(
                title="üö´ –í–µ–±—Ö—É–∫ —É–¥–∞–ª—ë–Ω",
                description=f"**–í–µ–±—Ö—É–∫:** {webhook_id}\n**–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:** {ctx.author.mention}",
                color=discord.Color.red(),
                timestamp=datetime.now()
            )
            
            await ctx.send(embed=embed)
            logger.info(f"[AntiSpam] –í–µ–±—Ö—É–∫ {webhook_id} —É–¥–∞–ª—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {ctx.author}")
            
        except discord.NotFound:
            await ctx.send("‚ùå –í–µ–±—Ö—É–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        except Exception as e:
            await ctx.send(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞: {e}")

    @commands.command(name="whitelist", help="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–µ–ª—ã–º —Å–ø–∏—Å–∫–æ–º –±–æ—Ç–æ–≤")
    async def manage_whitelist(self, ctx, action: str, bot_id: int = None):
        """–£–ø—Ä–∞–≤–ª—è–µ—Ç –±–µ–ª—ã–º —Å–ø–∏—Å–∫–æ–º –±–æ—Ç–æ–≤"""
        if not ctx.author.guild_permissions.administrator:
            await ctx.send("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            return
        
        action = action.lower()
        
        if action == "list":
            if not self.whitelisted_bots:
                await ctx.send("üìã –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
                return
            
            embed = discord.Embed(
                title="üìã –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤",
                color=discord.Color.green()
            )
            
            for bot_id in self.whitelisted_bots:
                try:
                    bot_user = await self.bot.fetch_user(bot_id)
                    embed.add_field(
                        name=f"ü§ñ {bot_user.name}",
                        value=f"ID: {bot_id}",
                        inline=True
                    )
                except:
                    embed.add_field(
                        name=f"ü§ñ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–æ—Ç",
                        value=f"ID: {bot_id}",
                        inline=True
                    )
            
            await ctx.send(embed=embed)
            
        elif action == "add" and bot_id:
            self.whitelisted_bots.add(bot_id)
            await ctx.send(f"‚úÖ –ë–æ—Ç {bot_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫")
            logger.info(f"[AntiSpam] –ë–æ—Ç {bot_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {ctx.author}")
            
        elif action == "remove" and bot_id:
            if bot_id in self.whitelisted_bots:
                self.whitelisted_bots.remove(bot_id)
                await ctx.send(f"‚ùå –ë–æ—Ç {bot_id} —É–¥–∞–ª—ë–Ω –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞")
                logger.info(f"[AntiSpam] –ë–æ—Ç {bot_id} —É–¥–∞–ª—ë–Ω –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {ctx.author}")
            else:
                await ctx.send(f"‚ùå –ë–æ—Ç {bot_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ")
                
        else:
            await ctx.send("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `!whitelist <list|add|remove> [bot_id]`")

async def setup(bot):
    await bot.add_cog(AntiSpamCog(bot)) 